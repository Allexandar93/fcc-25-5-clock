{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["SetTimer","props","id","title","toLowerCase","className","onClick","handleDecrease","count","handleIncrease","audio","document","getElementById","App","state","breakCount","sessionCount","clockCount","currentTimer","isPlaying","handlePlayPause","clearInterval","loop","setState","setInterval","play","handleReset","pause","currentTime","convertToTime","minutes","Math","floor","seconds","handleBreakDecrease","handleBreakIncrease","handleSessionDecrease","handleSessionIncrease","undefined","this","breakProps","sessionProps","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.3585ffd7.chunk.js","sourcesContent":["import React from 'react'\nimport './App.scss';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nfunction SetTimer(props) {\n  const id = props.title.toLowerCase()\n  return (\n  <div className=\"timer-container\">\n    <h2 id={`${id}-label`} >{props.title} Length</h2>\n\n    <div className=\"flex actions-wrapper\">\n      \n      <button id={`${id}-decrement`} onClick={props.handleDecrease} ><i className=\"fa fa-minus\" /></button>\n\n      <span id={`${id}-length`} >{props.count}</span>\n\n      <button id={`${id}-increment`} onClick={props.handleIncrease} ><i className=\"fa fa-plus\" /></button>\n\n    </div>\n\n  </div>\n  )\n}\n\n\nconst audio = document.getElementById('beep')\n\nclass App extends React.Component {\n  state={\n    breakCount: 5,\n    sessionCount: 25,\n    clockCount: 25*60,\n    currentTimer: 'Session',\n    isPlaying: false,\n  }\n  constructor(props) {\n    super(props)\n    this.loop = undefined\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.loop)\n  }\n\n  \n\n   handlePlayPause = () => {\n     const {isPlaying} = this.state\n     if (isPlaying) {\n       clearInterval(this.loop)\n       this.setState({\n         isPlaying: false\n       })\n     } else {\n       this.setState({\n         isPlaying: true\n       })\n\n      this.loop = setInterval(() => {\n        const {clockCount,\n              currentTimer,\n              breakCount,\n              sessionCount} = this.state\n\n        if (clockCount === 0) {\n          this.setState({\n            currentTimer: (currentTimer === 'Session') ? 'Break' : 'Sesion' ,\n            clockCount: (currentTimer === 'Session') ? (breakCount * 60) : (sessionCount * 60)\n          })\n\n          audio.play()\n        }else {\n          this.setState ({\n            clockCount: clockCount - 1\n          })\n\n        }\n\n      }, 1000)\n     }\n     \n   }\n\n   handleReset = () => {\n     this.setState({\n      breakCount: 5,\n      sessionCount: 25,\n      clockCount: 25 * 60,\n      currentTimer: 'Session',\n      isPlaying: false,\n     })\n\n     clearInterval(this.loop)\n\n     audio.pause()\n     audio.currentTime = 0\n   }\n\n   \n\n   \n\n   convertToTime = (count) => {\n     let  minutes = Math.floor(count / 60)\n     let seconds = count % 60\n     seconds = seconds < 10 ? ('0' + seconds) : seconds\n     minutes = minutes < 10 ? ('0' + minutes) : minutes\n     return `${minutes}:${seconds}`\n   }\n\n   handleBreakDecrease = () => {\n     const {breakCount, isPlaying, currentTimer} = this.state\n\n     if (breakCount > 1) {\n      if (!isPlaying && currentTimer === 'Break') {\n        this.setState({\n          breakCount: breakCount - 1,\n          clockCount: (breakCount - 1) * 60\n        })\n      } else {\n        this.setState({\n          breakCount: breakCount - 1\n        })\n      }\n     } \n   }\n\n   handleBreakIncrease = () => {\n     const {breakCount, isPlaying, currentTimer} = this.state\n\n     if (breakCount < 60) {\n      if (!isPlaying && currentTimer === 'Break') {\n        this.setState({\n          breakCount: breakCount + 1,\n          clockCount: (breakCount + 1) * 60\n        })\n      } else {\n        this.setState({\n          breakCount: breakCount + 1\n        })\n      }\n     }\n    }\n\n    handleSessionDecrease = () => {\n      const {sessionCount, isPlaying, currentTimer} = this.state\n\n      if(sessionCount > 1) {\n        if (!isPlaying && currentTimer === 'Session') {\n          this.setState({\n            sessionCount: sessionCount - 1,\n            clockCount: (sessionCount - 1) * 60\n          })\n        } else {\n          this.setState({\n            sessionCount: sessionCount - 1\n          })\n        }\n      } \n    }\n\n\n    handleSessionIncrease = () => {\n      const {sessionCount, isPlaying, currentTimer} = this.state\n\n      if (sessionCount < 60) {\n        if (!isPlaying && currentTimer === 'Session') {\n          this.setState({\n            sessionCount: sessionCount + 1,\n            clockCount: (sessionCount + 1) * 60\n          })\n        } else {\n          this.setState({\n            sessionCount: sessionCount + 1\n          })\n        }\n      }\n    }\n\n  \n\n  render () {\n\n    const {\n      breakCount,\n      sessionCount,\n      clockCount,\n      currentTimer,\n      isPlaying\n    } = this.state\n     \n    const breakProps = {\n      title: 'Break',\n      count: breakCount,\n      handleDecrease: this.handleBreakDecrease,\n      handleIncrease: this.handleBreakIncrease\n    }\n\n    const sessionProps = {\n      title: 'Session',\n      count: sessionCount,\n      handleDecrease: this.handleSessionDecrease,\n      handleIncrease: this.handleSessionIncrease\n    }\n\n    return (\n      <header className=\"App-header\">\n\n      <div className=\"body\">\n       \n       <div className=\"flex\">\n         <SetTimer {...breakProps} />\n         <SetTimer {...sessionProps} />\n       </div>\n\n       <div className=\"clock-container\">\n         <h1 id=\"timer-label\" > {currentTimer} </h1>\n\n         <span id=\"time-left\" >{this.convertToTime(clockCount)}</span>\n\n         \n\n          <div className=\"flex\">\n           \n          <button id=\"start_stop\" onClick={this.handlePlayPause} ><i className={`fa fa-${isPlaying ? 'pause' : 'play'}`}/></button>\n\n          <button id=\"reset\" onClick={this.handleReset} ><i className=\"fa fa-refresh\" /></button>\n             \n          </div>\n\n       </div>\n       \n      </div>\n      \n      </header>\n \n    )\n  }\n    \n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}